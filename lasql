BEGIN;

WITH lockable_streams AS (
    SELECT o.id, o.stream_id, o.global_seq
    FROM offsets o
    WHERE o.group_id = 'foobar2'
    FOR UPDATE SKIP LOCKED
)
SELECT 
    e.global_seq,
    e.id,
    e.stream_id,
    e.seq,
    e.type,
    e.causation_id,
    e.correlation_id,
    e.payload,
    e.created_at,
    ls.id AS offset_id
FROM events e
LEFT JOIN lockable_streams ls ON e.stream_id = ls.stream_id
WHERE e.global_seq > COALESCE(ls.global_seq, 0)
ORDER BY e.global_seq
LIMIT 1;

-- simulate processing
SELECT pg_sleep(30);

COMMIT;



##########################

BEGIN;

WITH next_candidate AS (
    SELECT 
        e.stream_id,
        e.global_seq,
        e.id as event_id,
        e.seq,
        e.type,
        e.payload,
        e.created_at
    FROM events e
    LEFT JOIN offsets o ON e.stream_id = o.stream_id 
        AND o.group_id = 'test-group'
    WHERE e.global_seq > COALESCE(o.global_seq, 0)
    ORDER BY e.global_seq
    LIMIT 1
),
locked_offset AS (
    SELECT o.stream_id, o.global_seq
    FROM offsets o, next_candidate nc
    WHERE o.group_id = 'test-group'
    AND o.stream_id = nc.stream_id
    FOR UPDATE SKIP LOCKED
),
locked_stream AS (
    INSERT INTO offsets (stream_id, group_id, global_seq)
    SELECT nc.stream_id, 'test-group', 0
    FROM next_candidate nc
    WHERE NOT EXISTS (SELECT 1 FROM locked_offset)
    ON CONFLICT (group_id, stream_id) DO NOTHING
    RETURNING stream_id
)
SELECT 
    nc.*
FROM next_candidate nc
WHERE EXISTS (SELECT 1 FROM locked_offset WHERE locked_offset.stream_id = nc.stream_id)
   OR EXISTS (SELECT 1 FROM locked_stream WHERE locked_stream.stream_id = nc.stream_id);

-- SELECT pg_sleep(30);

COMMIT;
